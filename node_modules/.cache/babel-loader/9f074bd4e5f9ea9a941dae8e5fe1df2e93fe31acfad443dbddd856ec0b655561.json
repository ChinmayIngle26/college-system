{"ast":null,"code":"var _jsxFileName = \"/Users/chinmayingle/Documents/college-system/college-system-app/src/components/AnonymousComplaintSystem.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchComplaints, submitComplaint } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnonymousComplaintSystem = () => {\n  _s();\n  const [complaints, setComplaints] = useState([]);\n  const [newComplaint, setNewComplaint] = useState('');\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const loadComplaints = async () => {\n      const fetchedComplaints = await fetchComplaints();\n      setComplaints(fetchedComplaints);\n      setLoading(false);\n    };\n    loadComplaints();\n  }, []);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (newComplaint.trim()) {\n      const complaintData = {\n        title: 'Anonymous',\n        description: newComplaint,\n        content: newComplaint\n      }; // Assuming ComplaintData has 'title', 'description', and 'content' fields\n      await submitComplaint(complaintData);\n      setNewComplaint('');\n      const updatedComplaints = await fetchComplaints();\n      setComplaints(updatedComplaints);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Anonymous Complaint System\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newComplaint,\n        onChange: e => setNewComplaint(e.target.value),\n        placeholder: \"Submit your complaint anonymously\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit Complaint\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading complaints...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: complaints.map((complaint, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: complaint\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n_s(AnonymousComplaintSystem, \"lRNeLxTNm0Wi5TsaXeh2NqfWSWc=\");\n_c = AnonymousComplaintSystem;\nexport default AnonymousComplaintSystem;\nvar _c;\n$RefreshReg$(_c, \"AnonymousComplaintSystem\");","map":{"version":3,"names":["React","useState","useEffect","fetchComplaints","submitComplaint","jsxDEV","_jsxDEV","AnonymousComplaintSystem","_s","complaints","setComplaints","newComplaint","setNewComplaint","loading","setLoading","loadComplaints","fetchedComplaints","handleSubmit","e","preventDefault","trim","complaintData","title","description","content","updatedComplaints","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","target","placeholder","required","type","map","complaint","index","_c","$RefreshReg$"],"sources":["/Users/chinmayingle/Documents/college-system/college-system-app/src/components/AnonymousComplaintSystem.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchComplaints, submitComplaint } from '../services/api';\n\nconst AnonymousComplaintSystem = () => {\n    const [complaints, setComplaints] = useState([]);\n    const [newComplaint, setNewComplaint] = useState('');\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const loadComplaints = async () => {\n            const fetchedComplaints = await fetchComplaints();\n            setComplaints(fetchedComplaints);\n            setLoading(false);\n        };\n        loadComplaints();\n    }, []);\n\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        if (newComplaint.trim()) {\n            const complaintData = { title: 'Anonymous', description: newComplaint, content: newComplaint }; // Assuming ComplaintData has 'title', 'description', and 'content' fields\n            await submitComplaint(complaintData);\n            setNewComplaint('');\n            const updatedComplaints = await fetchComplaints();\n            setComplaints(updatedComplaints);\n        }\n    };\n\n    return (\n        <div>\n            <h2>Anonymous Complaint System</h2>\n            <form onSubmit={handleSubmit}>\n                <textarea\n                    value={newComplaint}\n                    onChange={(e) => setNewComplaint(e.target.value)}\n                    placeholder=\"Submit your complaint anonymously\"\n                    required\n                />\n                <button type=\"submit\">Submit Complaint</button>\n            </form>\n            {loading ? (\n                <p>Loading complaints...</p>\n            ) : (\n                <ul>\n                    {complaints.map((complaint, index) => (\n                        <li key={index}>{complaint}</li>\n                    ))}\n                </ul>\n            )}\n        </div>\n    );\n};\n\nexport default AnonymousComplaintSystem;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}