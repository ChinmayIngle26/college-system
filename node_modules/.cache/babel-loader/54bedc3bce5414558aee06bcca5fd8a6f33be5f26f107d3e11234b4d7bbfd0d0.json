{"ast":null,"code":"export const sendEmail = async (to, subject, text) => {\n  try {\n    const response = await fetch('http://localhost:5001/send-email', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        to,\n        subject,\n        text\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to send email');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    return {\n      error: \"Failed to send email\"\n    };\n  }\n};\nexport const sendHealthNotification = async (studentEmail, classCoordinatorEmail, studentName) => {\n  try {\n    const response = await fetch('http://localhost:5001/send-health-notification', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        studentEmail,\n        classCoordinatorEmail,\n        studentName\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to send health notification');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error sending health notification:\", error);\n    return {\n      error: \"Failed to send health notification\"\n    };\n  }\n};\nexport const sendLeaveNotification = async (parentEmail, studentName) => {\n  try {\n    const response = await fetch('http://localhost:5001/send-leave-notification', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        parentEmail,\n        studentName\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to send leave notification');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error sending leave notification:\", error);\n    return {\n      error: \"Failed to send leave notification\"\n    };\n  }\n};","map":{"version":3,"names":["sendEmail","to","subject","text","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","error","console","sendHealthNotification","studentEmail","classCoordinatorEmail","studentName","sendLeaveNotification","parentEmail"],"sources":["/Users/chinmayingle/Documents/college-system/college-system-app/src/services/notification.ts"],"sourcesContent":["export const sendEmail = async (to: string, subject: string, text: string) => {\n    try {\n        const response = await fetch('http://localhost:5001/send-email', {\n            method: 'POST',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ to, subject, text }),\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to send email');\n        }\n\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error sending email:\", error);\n        return { error: \"Failed to send email\" };\n    }\n};\n\nexport const sendHealthNotification = async (studentEmail: string, classCoordinatorEmail: string, studentName: string) => {\n    try {\n        const response = await fetch('http://localhost:5001/send-health-notification', {\n            method: 'POST',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ studentEmail, classCoordinatorEmail, studentName }),\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to send health notification');\n        }\n\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error sending health notification:\", error);\n        return { error: \"Failed to send health notification\" };\n    }\n};\n\nexport const sendLeaveNotification = async (parentEmail: string, studentName: string) => {\n    try {\n        const response = await fetch('http://localhost:5001/send-leave-notification', {\n            method: 'POST',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ parentEmail, studentName }),\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to send leave notification');\n        }\n\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error sending leave notification:\", error);\n        return { error: \"Failed to send leave notification\" };\n    }\n};\n"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAG,MAAAA,CAAOC,EAAU,EAAEC,OAAe,EAAEC,IAAY,KAAK;EAC1E,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;MAC7DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAET,EAAE;QAAEC,OAAO;QAAEC;MAAK,CAAC;IAC9C,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IAC3C;IAEA,OAAO,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO;MAAEA,KAAK,EAAE;IAAuB,CAAC;EAC5C;AACJ,CAAC;AAED,OAAO,MAAME,sBAAsB,GAAG,MAAAA,CAAOC,YAAoB,EAAEC,qBAA6B,EAAEC,WAAmB,KAAK;EACtH,IAAI;IACA,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,gDAAgD,EAAE;MAC3EC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEO,YAAY;QAAEC,qBAAqB;QAAEC;MAAY,CAAC;IAC7E,CAAC,CAAC;IAEF,IAAI,CAACf,QAAQ,CAACO,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;IACzD;IAEA,OAAO,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC1D,OAAO;MAAEA,KAAK,EAAE;IAAqC,CAAC;EAC1D;AACJ,CAAC;AAED,OAAO,MAAMM,qBAAqB,GAAG,MAAAA,CAAOC,WAAmB,EAAEF,WAAmB,KAAK;EACrF,IAAI;IACA,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,+CAA+C,EAAE;MAC1EC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEW,WAAW;QAAEF;MAAY,CAAC;IACrD,CAAC,CAAC;IAEF,IAAI,CAACf,QAAQ,CAACO,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;IACxD;IAEA,OAAO,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,OAAO;MAAEA,KAAK,EAAE;IAAoC,CAAC;EACzD;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}