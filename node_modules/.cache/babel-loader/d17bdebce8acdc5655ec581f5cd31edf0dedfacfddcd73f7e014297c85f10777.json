{"ast":null,"code":"import axios from 'axios';\nimport { API_ENDPOINTS } from '../utils/constants';\n// Axios instance with global settings (optional)\nconst axiosInstance = axios.create({\n  baseURL: process.env.VITE_API_BASE_URL || 'http://localhost:5000',\n  // Adjust accordingly\n  timeout: 5000,\n  // Optional timeout\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Generic function for logging errors\nconst handleApiError = (error, message) => {\n  var _error$response, _error$response2, _error$response2$data;\n  console.error(message, ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  throw new Error(`${message}: ${((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message}`);\n};\n\n// Fetch election data\nexport const fetchElectionData = async () => {\n  try {\n    const response = await axiosInstance.get(API_ENDPOINTS.ELECTIONS.BASE);\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Error fetching election data');\n  }\n};\n\n// Submit a vote\nexport const submitVote = async voteData => {\n  try {\n    const response = await axiosInstance.post(API_ENDPOINTS.ELECTIONS.VOTE, voteData);\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Error submitting vote');\n  }\n};\n\n// Fetch anonymous complaints\nexport const fetchComplaints = async () => {\n  try {\n    const response = await axiosInstance.get(API_ENDPOINTS.COMPLAINTS.ANONYMOUS);\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Error fetching complaints');\n  }\n};\n\n// Submit a complaint\nexport const submitComplaint = async complaintData => {\n  try {\n    const response = await axiosInstance.post(API_ENDPOINTS.COMPLAINTS.ANONYMOUS, complaintData);\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Error submitting complaint');\n  }\n};\n\n// Fetch college budget data\nexport const fetchBudgetData = async () => {\n  try {\n    const response = await axiosInstance.get(API_ENDPOINTS.BUDGETS.BASE);\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Error fetching budget data');\n  }\n};\n\n// Fetch academic integrity records\nexport const fetchAcademicIntegrityRecords = async () => {\n  try {\n    const response = await axiosInstance.get(API_ENDPOINTS.ACADEMIC.INTEGRITY);\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Error fetching academic integrity records');\n  }\n};\n\n// Fetch applications\nexport const fetchApplications = async () => {\n  try {\n    const response = await axiosInstance.get(API_ENDPOINTS.APPLICATIONS.BASE);\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Error fetching applications');\n  }\n};\n\n// Submit an application\nexport const submitApplication = async applicationData => {\n  try {\n    const response = await axiosInstance.post(API_ENDPOINTS.APPLICATIONS.BASE, applicationData);\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Error submitting application');\n  }\n};\n\n// Update application status\nexport const updateApplicationStatus = async (id, status) => {\n  try {\n    const response = await axiosInstance.patch(`${API_ENDPOINTS.APPLICATIONS.STATUS_UPDATE}/${id}`, {\n      status\n    });\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Error updating application status');\n  }\n};\n\n// Fetch budget tracking data\nexport const fetchBudgets = async () => {\n  try {\n    const response = await axiosInstance.get(API_ENDPOINTS.BUDGETS.TRACKING);\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Error fetching budgets');\n  }\n};\n\n// Submit expense proof\nexport const submitExpenseProof = async (budgetId, proof) => {\n  const formData = new FormData();\n  formData.append('proof', proof);\n  try {\n    const response = await axiosInstance.post(`${API_ENDPOINTS.BUDGETS.UPLOAD_PROOF}/${budgetId}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Error submitting expense proof');\n  }\n};","map":{"version":3,"names":["axios","API_ENDPOINTS","axiosInstance","create","baseURL","process","env","VITE_API_BASE_URL","timeout","headers","handleApiError","error","message","_error$response","_error$response2","_error$response2$data","console","response","data","Error","fetchElectionData","get","ELECTIONS","BASE","submitVote","voteData","post","VOTE","fetchComplaints","COMPLAINTS","ANONYMOUS","submitComplaint","complaintData","fetchBudgetData","BUDGETS","fetchAcademicIntegrityRecords","ACADEMIC","INTEGRITY","fetchApplications","APPLICATIONS","submitApplication","applicationData","updateApplicationStatus","id","status","patch","STATUS_UPDATE","fetchBudgets","TRACKING","submitExpenseProof","budgetId","proof","formData","FormData","append","UPLOAD_PROOF"],"sources":["/Users/chinmayingle/Documents/college-system/college-system-app/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { API_ENDPOINTS } from '../utils/constants';\n\ninterface VoteData {\n    candidateId: string;\n    voterId: string;\n}\n\n// Axios instance with global settings (optional)\nconst axiosInstance = axios.create({\n    baseURL: process.env.VITE_API_BASE_URL || 'http://localhost:5000', // Adjust accordingly\n    timeout: 5000, // Optional timeout\n    headers: { 'Content-Type': 'application/json' }\n});\n\n// Generic function for logging errors\nconst handleApiError = (error: any, message: string) => {\n    console.error(message, error.response?.data || error.message);\n    throw new Error(`${message}: ${error.response?.data?.message || error.message}`);\n};\n\n// Fetch election data\nexport const fetchElectionData = async () => {\n    try {\n        const response = await axiosInstance.get(API_ENDPOINTS.ELECTIONS.BASE);\n        return response.data;\n    } catch (error) {\n        handleApiError(error, 'Error fetching election data');\n    }\n};\n\n// Submit a vote\nexport const submitVote = async (voteData: VoteData) => {\n    try {\n        const response = await axiosInstance.post(API_ENDPOINTS.ELECTIONS.VOTE, voteData);\n        return response.data;\n    } catch (error) {\n        handleApiError(error, 'Error submitting vote');\n    }\n};\n\n// Fetch anonymous complaints\nexport const fetchComplaints = async () => {\n    try {\n        const response = await axiosInstance.get(API_ENDPOINTS.COMPLAINTS.ANONYMOUS);\n        return response.data;\n    } catch (error) {\n        handleApiError(error, 'Error fetching complaints');\n    }\n};\n\n// Submit a complaint\nexport const submitComplaint = async (complaintData: ComplaintData) => {\n    try {\n        const response = await axiosInstance.post(API_ENDPOINTS.COMPLAINTS.ANONYMOUS, complaintData);\n        return response.data;\n    } catch (error) {\n        handleApiError(error, 'Error submitting complaint');\n    }\n};\n\n// Fetch college budget data\nexport const fetchBudgetData = async () => {\n    try {\n        const response = await axiosInstance.get(API_ENDPOINTS.BUDGETS.BASE);\n        return response.data;\n    } catch (error) {\n        handleApiError(error, 'Error fetching budget data');\n    }\n};\n\n// Fetch academic integrity records\nexport const fetchAcademicIntegrityRecords = async () => {\n    try {\n        const response = await axiosInstance.get(API_ENDPOINTS.ACADEMIC.INTEGRITY);\n        return response.data;\n    } catch (error) {\n        handleApiError(error, 'Error fetching academic integrity records');\n    }\n};\n\n// Fetch applications\nexport const fetchApplications = async () => {\n    try {\n        const response = await axiosInstance.get(API_ENDPOINTS.APPLICATIONS.BASE);\n        return response.data;\n    } catch (error) {\n        handleApiError(error, 'Error fetching applications');\n    }\n};\n\n// Submit an application\nexport const submitApplication = async (applicationData: ApplicationData) => {\n    try {\n        const response = await axiosInstance.post(API_ENDPOINTS.APPLICATIONS.BASE, applicationData);\n        return response.data;\n    } catch (error) {\n        handleApiError(error, 'Error submitting application');\n    }\n};\n\n// Update application status\nexport const updateApplicationStatus = async (id: string, status: string) => {\n    try {\n        const response = await axiosInstance.patch(`${API_ENDPOINTS.APPLICATIONS.STATUS_UPDATE}/${id}`, { status });\n        return response.data;\n    } catch (error) {\n        handleApiError(error, 'Error updating application status');\n    }\n};\n\n// Fetch budget tracking data\nexport const fetchBudgets = async () => {\n    try {\n        const response = await axiosInstance.get(API_ENDPOINTS.BUDGETS.TRACKING);\n        return response.data;\n    } catch (error) {\n        handleApiError(error, 'Error fetching budgets');\n    }\n};\n\n// Submit expense proof\nexport const submitExpenseProof = async (budgetId: string, proof: File) => {\n    const formData = new FormData();\n    formData.append('proof', proof);\n\n    try {\n        const response = await axiosInstance.post(`${API_ENDPOINTS.BUDGETS.UPLOAD_PROOF}/${budgetId}`, formData, {\n            headers: { 'Content-Type': 'multipart/form-data' }\n        });\n        return response.data;\n    } catch (error) {\n        handleApiError(error, 'Error submitting expense proof');\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}