{"ast":null,"code":"var _jsxFileName = \"/Users/chinmayingle/Documents/college-system/college-system-app/src/context/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { auth, db } from \"../services/firebase\"; // âœ… Import Firestore instance\n\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from \"firebase/auth\";\nimport { doc, setDoc, getDoc } from \"firebase/firestore\"; // âœ… Firestore functions\n\n// Create Auth Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userData, setUserData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async user => {\n      setCurrentUser(user);\n      if (user) {\n        await fetchUserData(user.uid); // âœ… Fetch user data when auth state changes\n      } else {\n        setUserData(null);\n      }\n      setLoading(false);\n    });\n    return () => unsubscribe();\n  }, []);\n\n  // âœ… Function to Fetch User Data from Firestore\n\n  const fetchUserData = async uid => {\n    try {\n      const docRef = doc(db, \"users\", uid);\n      const docSnap = await getDoc(docRef);\n      if (docSnap.exists()) {\n        setUserData(docSnap.data());\n      } else {\n        setUserData(null);\n      }\n    } catch (error) {\n      console.error(\"Error fetching user data:\", error);\n    }\n  };\n\n  // âœ… Updated Signup Function to Store Name & Registration Number\n\n  const signup = async (email, password, name, registrationNumber) => {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n      const user = userCredential.user;\n\n      // ðŸ”¹ Store Additional Data in Firestore\n\n      await setDoc(doc(db, \"users\", user.uid), {\n        uid: user.uid,\n        name,\n        email,\n        registrationNumber,\n        createdAt: new Date()\n      });\n\n      // âœ… Fetch user data immediately after signup\n\n      await fetchUserData(user.uid);\n      return user;\n    } catch (error) {\n      console.error(\"Signup Error:\", error);\n      throw error;\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n      const user = userCredential.user;\n\n      // âœ… Fetch user data immediately after login\n\n      await fetchUserData(user.uid);\n      return user;\n    } catch (error) {\n      console.error(\"Login Error:\", error);\n      throw error;\n    }\n  };\n  const logout = async () => {\n    try {\n      await signOut(auth);\n      setCurrentUser(null);\n      setUserData(null); // âœ… Clear user data on logout\n    } catch (error) {\n      console.error(\"Logout Error:\", error);\n      throw error;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      userData,\n      signup,\n      login,\n      logout\n    },\n    children: [loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 19\n    }, this) : children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 1\n  }, this);\n};\n\n// Hook to Use Auth\n_s(AuthProvider, \"r83hwWaD25hIL02HF7xJwU/65pM=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n\n//----------------------------------------------------------------\n\n// import React, { createContext, useContext, useState, useEffect } from \"react\";\n// import { auth, db } from \"../services/firebase\"; // âœ… Import Firestore instance\n// import {\n//   createUserWithEmailAndPassword,\n//   signInWithEmailAndPassword,\n//   signOut,\n//   onAuthStateChanged,\n//   User,\n// } from \"firebase/auth\";\n// import { doc, setDoc, getDoc } from \"firebase/firestore\"; // âœ… Firestore functions\n\n// // Create Auth Context\n// const AuthContext = createContext<any>(null);\n\n// export const AuthProvider = ({ children }: { children: React.ReactNode }) => {\n//   const [currentUser, setCurrentUser] = useState<User | null>(null);\n//   const [userData, setUserData] = useState<any>(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const unsubscribe = onAuthStateChanged(auth, async (user) => {\n//       setCurrentUser(user);\n//       if (user) {\n//         const docRef = doc(db, \"users\", user.uid);\n//         const docSnap = await getDoc(docRef);\n//         if (docSnap.exists()) {\n//           setUserData(docSnap.data());\n//         }\n//       }\n//       setLoading(false);\n//     });\n\n//     return () => unsubscribe();\n//   }, []);\n\n//   // âœ… Updated Signup Function to Store Name & Registration Number\n//   const signup = async (email: string, password: string, name: string, registrationNumber: string) => {\n//     const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n//     const user = userCredential.user;\n\n//     // ðŸ”¹ Store Additional Data in Firestore\n//     await setDoc(doc(db, \"users\", user.uid), {\n//       uid: user.uid,\n//       name,\n//       email,\n//       registrationNumber,\n//       createdAt: new Date(),\n//     });\n\n//     return user;\n//   };\n\n//   const login = (email: string, password: string) => {\n//     return signInWithEmailAndPassword(auth, email, password);\n//   };\n\n//   const logout = () => {\n//     setUserData(null); // Clear user data on logout\n//     return signOut(auth);\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ currentUser, userData, signup, login, logout }}>\n//       {!loading && children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// // Hook to Use Auth\n// export const useAuth = () => {\n//   return useContext(AuthContext);\n// };\n\n// import { createContext, useContext, useState, useEffect } from \"react\";\n// import { auth, db } from \"../services/firebase\";\n// import { \n//   createUserWithEmailAndPassword, \n//   signInWithEmailAndPassword, \n//   signOut, \n//   onAuthStateChanged \n// } from \"firebase/auth\";\n// import { doc, setDoc, getDoc } from \"firebase/firestore\";\n\n// interface CustomUser {\n//   uid: string;\n//   name: string;\n//   email: string;\n//   registrationNumber: string;\n// }\n\n// const AuthContext = createContext<CustomUser | null>(null);\n\n//   const [currentUser, setCurrentUser] = useState<CustomUser | null>(null);\n// return useContext(AuthContext);\n\n// import { ReactNode } from \"react\";\n\n// export function AuthProvider({ children }: { children: ReactNode }) {\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   async function signup(name: string, email: string, password: string, registrationNumber: string) {\n//     const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n//     const user = userCredential.user;\n\n//     // Store user info in Firestore\n//     await setDoc(doc(db, \"users\", user.uid), {\n//       name,\n//       email,\n//       registrationNumber,\n//       uid: user.uid,\n//     });\n//   }\n\n//   async function login(email: string, password: string) {\n//     return signInWithEmailAndPassword(auth, email, password);\n//   }\n\n//   async function logout() {\n//     return signOut(auth);\n//   }\n\n//   useEffect(() => {\n//     const unsubscribe = onAuthStateChanged(auth, async (user) => {\n//       if (user) {\n//         const userDoc = await getDoc(doc(db, \"users\", user.uid));\n//         setCurrentUser({ uid: user.uid, ...userDoc.data() });\n//       } else {\n//         setCurrentUser(null);\n//       }\n//       setLoading(false);\n//     });\n//     return unsubscribe;\n//   }, []);\n\n//   const value = {\n//     currentUser,\n//     signup,\n//     login,\n//     logout,\n//   };\n\n//   return <AuthContext.Provider value={value}>{!loading && children}</AuthContext.Provider>;\n// }\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","auth","db","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","doc","setDoc","getDoc","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","userData","setUserData","loading","setLoading","unsubscribe","user","fetchUserData","uid","docRef","docSnap","exists","data","error","console","signup","email","password","name","registrationNumber","userCredential","createdAt","Date","login","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/chinmayingle/Documents/college-system/college-system-app/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\n\n import { auth, db } from \"../services/firebase\"; // âœ… Import Firestore instance\n\n import {\n\n   createUserWithEmailAndPassword,\n\n   signInWithEmailAndPassword,\n\n   signOut,\n\n   onAuthStateChanged,\n\n   User,\n\n } from \"firebase/auth\";\n\n import { doc, setDoc, getDoc } from \"firebase/firestore\"; // âœ… Firestore functions\n \n// Create Auth Context\n\n const AuthContext = createContext<any>(null);\n \nexport const AuthProvider = ({ children }: { children: React.ReactNode }) => {\n\n   const [currentUser, setCurrentUser] = useState<User | null>(null);\n\n   const [userData, setUserData] = useState<any>(null);\n\n   const [loading, setLoading] = useState(true);\n \n  useEffect(() => {\n\n     const unsubscribe = onAuthStateChanged(auth, async (user) => {\n\n       setCurrentUser(user);\n\n       if (user) {\n\n         await fetchUserData(user.uid); // âœ… Fetch user data when auth state changes\n\n       } else {\n\n         setUserData(null);\n\n       }\n\n       setLoading(false);\n\n     });\n \n    return () => unsubscribe();\n\n   }, []);\n \n  // âœ… Function to Fetch User Data from Firestore\n\n   const fetchUserData = async (uid: string) => {\n\n     try {\n\n       const docRef = doc(db, \"users\", uid);\n\n       const docSnap = await getDoc(docRef);\n\n       if (docSnap.exists()) {\n\n         setUserData(docSnap.data());\n\n       } else {\n\n         setUserData(null);\n\n       }\n\n     } catch (error) {\n\n       console.error(\"Error fetching user data:\", error);\n\n     }\n\n   };\n \n  // âœ… Updated Signup Function to Store Name & Registration Number\n\n   const signup = async (email: string, password: string, name: string, registrationNumber: string) => {\n\n     try {\n\n       const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n\n       const user = userCredential.user;\n \n      // ðŸ”¹ Store Additional Data in Firestore\n\n       await setDoc(doc(db, \"users\", user.uid), {\n\n         uid: user.uid,\n\n         name,\n\n         email,\n\n         registrationNumber,\n\n         createdAt: new Date(),\n\n       });\n \n      // âœ… Fetch user data immediately after signup\n\n       await fetchUserData(user.uid);\n \n      return user;\n\n     } catch (error) {\n\n       console.error(\"Signup Error:\", error);\n\n       throw error;\n\n     }\n\n   };\n \n  const login = async (email: string, password: string) => {\n\n     try {\n\n       const userCredential = await signInWithEmailAndPassword(auth, email, password);\n\n       const user = userCredential.user;\n \n      // âœ… Fetch user data immediately after login\n\n       await fetchUserData(user.uid);\n \n      return user;\n\n     } catch (error) {\n\n       console.error(\"Login Error:\", error);\n\n       throw error;\n\n     }\n\n   };\n \n  const logout = async () => {\n\n     try {\n\n       await signOut(auth);\n\n       setCurrentUser(null);\n\n       setUserData(null); // âœ… Clear user data on logout\n\n     } catch (error) {\n\n       console.error(\"Logout Error:\", error);\n\n       throw error;\n\n     }\n\n   };\n \n  return (\n<AuthContext.Provider value={{ currentUser, userData, signup, login, logout }}>\n\n       {loading ? <p>Loading...</p> : children} {/* âœ… Prevent UI flicker while loading */}\n</AuthContext.Provider>\n\n   );\n\n };\n \n// Hook to Use Auth\n\n export const useAuth = () => {\n\n   return useContext(AuthContext);\n\n };\n\n//----------------------------------------------------------------\n\n// import React, { createContext, useContext, useState, useEffect } from \"react\";\n// import { auth, db } from \"../services/firebase\"; // âœ… Import Firestore instance\n// import {\n//   createUserWithEmailAndPassword,\n//   signInWithEmailAndPassword,\n//   signOut,\n//   onAuthStateChanged,\n//   User,\n// } from \"firebase/auth\";\n// import { doc, setDoc, getDoc } from \"firebase/firestore\"; // âœ… Firestore functions\n\n// // Create Auth Context\n// const AuthContext = createContext<any>(null);\n\n// export const AuthProvider = ({ children }: { children: React.ReactNode }) => {\n//   const [currentUser, setCurrentUser] = useState<User | null>(null);\n//   const [userData, setUserData] = useState<any>(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const unsubscribe = onAuthStateChanged(auth, async (user) => {\n//       setCurrentUser(user);\n//       if (user) {\n//         const docRef = doc(db, \"users\", user.uid);\n//         const docSnap = await getDoc(docRef);\n//         if (docSnap.exists()) {\n//           setUserData(docSnap.data());\n//         }\n//       }\n//       setLoading(false);\n//     });\n\n//     return () => unsubscribe();\n//   }, []);\n\n//   // âœ… Updated Signup Function to Store Name & Registration Number\n//   const signup = async (email: string, password: string, name: string, registrationNumber: string) => {\n//     const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n//     const user = userCredential.user;\n\n//     // ðŸ”¹ Store Additional Data in Firestore\n//     await setDoc(doc(db, \"users\", user.uid), {\n//       uid: user.uid,\n//       name,\n//       email,\n//       registrationNumber,\n//       createdAt: new Date(),\n//     });\n\n//     return user;\n//   };\n\n//   const login = (email: string, password: string) => {\n//     return signInWithEmailAndPassword(auth, email, password);\n//   };\n\n//   const logout = () => {\n//     setUserData(null); // Clear user data on logout\n//     return signOut(auth);\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ currentUser, userData, signup, login, logout }}>\n//       {!loading && children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// // Hook to Use Auth\n// export const useAuth = () => {\n//   return useContext(AuthContext);\n// };\n\n\n// import { createContext, useContext, useState, useEffect } from \"react\";\n// import { auth, db } from \"../services/firebase\";\n// import { \n//   createUserWithEmailAndPassword, \n//   signInWithEmailAndPassword, \n//   signOut, \n//   onAuthStateChanged \n// } from \"firebase/auth\";\n// import { doc, setDoc, getDoc } from \"firebase/firestore\";\n\n// interface CustomUser {\n//   uid: string;\n//   name: string;\n//   email: string;\n//   registrationNumber: string;\n// }\n\n// const AuthContext = createContext<CustomUser | null>(null);\n\n//   const [currentUser, setCurrentUser] = useState<CustomUser | null>(null);\n// return useContext(AuthContext);\n\n// import { ReactNode } from \"react\";\n\n// export function AuthProvider({ children }: { children: ReactNode }) {\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   async function signup(name: string, email: string, password: string, registrationNumber: string) {\n//     const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n//     const user = userCredential.user;\n    \n//     // Store user info in Firestore\n//     await setDoc(doc(db, \"users\", user.uid), {\n//       name,\n//       email,\n//       registrationNumber,\n//       uid: user.uid,\n//     });\n//   }\n\n//   async function login(email: string, password: string) {\n//     return signInWithEmailAndPassword(auth, email, password);\n//   }\n\n//   async function logout() {\n//     return signOut(auth);\n//   }\n\n//   useEffect(() => {\n//     const unsubscribe = onAuthStateChanged(auth, async (user) => {\n//       if (user) {\n//         const userDoc = await getDoc(doc(db, \"users\", user.uid));\n//         setCurrentUser({ uid: user.uid, ...userDoc.data() });\n//       } else {\n//         setCurrentUser(null);\n//       }\n//       setLoading(false);\n//     });\n//     return unsubscribe;\n//   }, []);\n\n//   const value = {\n//     currentUser,\n//     signup,\n//     login,\n//     logout,\n//   };\n\n//   return <AuthContext.Provider value={value}>{!loading && children}</AuthContext.Provider>;\n// }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}